---
---
<div id="character" class="">
  <canvas id="character_canvas"class=""></canvas>
</div>

<script>
    import * as THREE from 'three'
    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
    import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

    const canvasElm = document.getElementById('character_canvas');

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, 320 / 320, .5, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true, canvas: canvasElm as HTMLElement });
    renderer.setSize(320, 320, true);

    window.addEventListener('load', () => {
      resizeCharacter(window.innerWidth)
    })

    window.addEventListener('resize', () => {
      resizeCharacter(window.innerWidth)
    })

    const resizeCharacter = (screen: number) => {
      if (screen > 0 && screen < 600) {
        camera.aspect = 320 /320 
        camera.updateProjectionMatrix()
        renderer.setSize(320, 320)
      } else if (screen > 600 && screen < 1023) {
        camera.aspect = 420 /420 
        camera.updateProjectionMatrix()
        renderer.setSize(420, 420)
      } else if (screen > 1023 && screen < 1280) {
        camera.aspect = 520 /520 
        camera.updateProjectionMatrix()
        renderer.setSize(520, 520)
      } else if (screen > 1280) {
        camera.aspect = 620 /620 
        camera.updateProjectionMatrix()
        renderer.setSize(620, 620)
      }

    }

    const controls = new OrbitControls( camera, renderer.domElement );
    controls.object.position.set(0, 0, 2)
    controls.target = new THREE.Vector3(0, 2, -1.5)
    setTimeout(() => {
      controls.autoRotate = true;
    },2000)
    controls.minPolarAngle = 1.3;
    controls.maxPolarAngle = 1.3;
    controls.update()

    const loader = new GLTFLoader();
    loader.load('main.glb', (gltf) => {
        const main = gltf.scene;
        scene.add(main);
    });

    const light = new THREE.AmbientLight( 0xE1E1E1 ); // soft white light
    scene.add( light );


    const animate = () => {
        requestAnimationFrame(animate);
        // required if controls.enableDamping or controls.autoRotate are set to true
        controls.update();
        
        renderer.render(scene, camera);
    };
    animate()
</script>
